// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ias/cloudformation/SQS.md
// ias/cloudformation/cfn-transformed-template.yml
// ias/cloudformation/index.js
// ias/cloudformation/sam.yml

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sqsMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x41\x6f\xd3\x40\x10\x85\xef\xf9\x15\x43\x2e\x3d\x8d\x5d\xb7\x69\x43\x8a\x7a\x08\x55\x11\x91\x6a\xc0\x31\x3e\x54\x42\xb2\xc6\xbb\x13\xb0\xb2\xeb\x5d\xef\xec\x52\x19\xc4\x7f\x47\x6d\x4a\x0e\x80\x04\xc7\x37\x4f\xf3\xbd\xa7\x19\x7a\x10\x50\xc6\x25\xbd\x73\xc1\x52\xec\xdd\x00\x9e\xd4\x9e\x3e\x33\x20\x46\xb6\xde\x50\x64\xdc\xf5\x86\x41\xc8\x66\x93\x35\x80\xe8\x52\xf4\x29\xfe\x66\xab\xdd\x80\x31\xd0\x20\x8f\x24\xd6\x47\xf7\x79\x47\xce\xb1\x4b\x6a\xcf\x11\x0c\xd9\x4e\x53\x76\x50\x99\x75\x4e\x1b\x9e\xfd\xa5\x87\x66\x6f\xdc\xf4\x47\x8d\x2c\xff\x57\x52\x24\xb5\xc7\x81\x2c\x3f\x47\xa1\x8c\x82\x3e\x38\xc5\x22\x2e\x00\xa2\x22\x4f\x5d\x6f\xfa\xd8\xb3\xc0\xcd\xfa\xc3\xfa\xf5\xe6\x6e\xf3\xf1\xbe\xdd\xac\x4b\x40\xf4\x14\xc8\x72\xe4\x80\xee\x2b\x87\xd0\x6b\x16\xa8\x12\x27\x7e\x47\x96\xaf\x6b\x67\xf9\xa8\x66\xb3\xfb\xf7\xcd\xb6\xad\xab\xba\xad\x9a\xdb\xe6\xb6\x6d\xb6\x77\xd7\x5f\x62\xf4\x72\x95\xe7\x32\x4a\x96\x04\x99\x24\x62\x91\x91\xa5\x6f\x6e\xa0\x07\xc9\x94\xb3\x79\x71\x76\xbe\xb8\xb8\x5c\xbe\x5c\x9d\x16\x67\xb9\x9d\x70\x7c\x24\xbe\x82\x4f\x4f\x77\x90\x51\x40\x78\xd0\x68\x59\xe4\xf0\x89\x27\x1f\x53\x30\xf0\x3f\xf4\x45\xb1\xbc\x2c\x2e\x16\xa7\xab\xd5\x72\x91\xd7\x55\xbd\x2d\xdf\xdc\x6c\x00\x7f\xf1\xb0\x73\x7a\x82\x93\xef\x30\xb7\x53\x79\x18\xcd\xaf\x60\xfe\x96\x8d\x71\x50\xaf\xcb\x17\x73\xf8\x71\xf2\x33\x00\x00\xff\xff\x8e\x89\x60\x53\x19\x02\x00\x00")

func sqsMdBytes() ([]byte, error) {
	return bindataRead(
		_sqsMd,
		"SQS.md",
	)
}

func sqsMd() (*asset, error) {
	bytes, err := sqsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "SQS.md", size: 537, mode: os.FileMode(420), modTime: time.Unix(1531793991, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7b, 0x5d, 0x20, 0x75, 0xaa, 0xcd, 0x16, 0xa5, 0xb6, 0xa4, 0xcd, 0xd4, 0x61, 0x43, 0xef, 0x8, 0x46, 0xa4, 0xc4, 0x8, 0xc, 0xc3, 0x7f, 0x10, 0x1e, 0x28, 0x45, 0xcd, 0x15, 0x6e, 0x6c, 0x1f}}
	return a, nil
}

var _cfnTransformedTemplateYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xc1\x72\xe2\x38\x10\xbd\xf3\x15\x5d\xba\x9b\x18\xd8\x4d\x82\x2e\x5b\x66\x43\x66\xa6\x26\x4c\x41\x94\x4a\xce\x8d\xdc\x26\x9a\xb1\x25\x47\x92\x43\xc8\xd7\x4f\x59\xc6\x60\x12\x73\x89\x4f\x56\xf7\x53\xf7\xd3\x7b\x2d\x45\x51\x04\x83\xe4\x49\x3c\x50\x51\xe6\xe8\xe9\xd6\xd8\x02\xfd\x23\x59\xa7\x8c\xe6\xc0\xc6\xf1\x28\x8e\xe2\x69\x14\x4f\xd9\xe0\x86\x9c\xb4\xaa\xf4\x4d\x66\xfe\x86\x45\x99\x13\x98\x0c\x4a\x6b\x24\x39\xa7\xf4\x06\x0a\x72\x0e\x37\xe4\xc0\x68\x40\x0d\x62\x25\xe0\xa5\xa2\x8a\x60\xab\xfc\x33\xdc\x61\xb1\x4e\x91\x0d\x96\x68\xb1\x20\x4f\xd6\x71\x18\xc0\x3e\x2c\x4c\x65\x25\x85\x00\xc0\x69\xaf\x3b\x23\xb1\xfe\xad\x9b\x35\x60\x90\x26\x25\x50\x1a\xdc\x84\x85\x0d\x0f\xbb\x92\x38\x08\x6f\x95\xde\x0c\x00\x56\x75\xd3\x5f\x58\xf4\xd7\xab\x13\x90\x19\x7b\xe4\xd7\x53\xe4\x9e\x5c\x60\xd4\x70\x5c\xec\xc4\x4a\x84\xaa\xb7\x95\x96\x4d\x9d\xb0\x67\x69\x4d\x49\xd6\xab\x3d\xae\xfe\xfe\x37\x29\x1d\x16\x00\x62\x32\xab\xe4\x1f\xf2\x1c\xf2\xc0\x7d\xb8\x0e\xcb\x61\x61\x4c\x9a\x53\x07\xf6\x93\x76\x1c\xc6\xb1\x8c\xe3\x2b\x92\x97\xeb\xf1\xbf\xd7\xd9\x65\x8a\x93\x6c\x4d\xff\x4c\xe4\x74\x3a\x8e\x2f\x65\x3a\xd9\xe3\xbf\xa3\x4e\x73\xb2\x1c\x94\x4e\xe9\x6d\xf8\xdc\x2c\xf7\xc9\x7b\x93\x77\x09\xfc\x07\xec\x56\x73\xfe\x8d\x7c\xe2\x3d\x3b\x84\x3b\x08\x80\xa8\xe7\x84\x75\x99\x13\x48\x62\x75\xdb\xa1\xd2\x5e\xd5\xea\x6a\x93\xd2\x6f\x77\x3d\x1c\xc5\xfb\xcc\x03\x6e\x5c\xa7\x72\xd4\x6d\x12\x0e\xc8\x1a\x15\xb8\xb4\x84\x9e\xd2\xd9\x8e\x75\x10\x8f\x98\x57\xb5\x05\xc9\xa2\x63\x08\x4b\x9e\x04\xe7\x8d\xf1\x9c\xb7\xec\x58\xaf\x2b\x21\x32\x7f\x25\xed\xcf\xfb\x33\x43\x2f\x9f\x85\x7a\x27\x0e\x07\xda\x61\x4b\x33\x82\x89\xd5\x5f\x11\xef\xc5\x05\x22\x67\x04\x6b\xf9\x75\x66\x32\xe8\x48\x19\xef\x39\xc5\xd9\xc3\x77\x68\x2e\xb0\x2c\x95\xde\xf4\xcb\xd0\x99\x80\x1e\x01\x12\xe7\xaa\x82\x6a\xcc\xd2\xe4\x4a\xee\x6e\x8c\xac\x8a\xa3\x64\x61\x1a\x3d\x7a\xfa\x10\xfb\xe0\x26\x40\xd2\xbd\x08\x5d\x14\x73\xde\xf1\x63\x17\x76\x02\x98\x67\x19\x49\xcf\x21\xc9\x73\xb3\x3d\xc9\x2c\xad\xd2\x52\x95\x98\x7f\x2a\x29\xc8\xbe\x2a\x49\x9f\xe2\x75\xb3\xfd\xad\xc2\x02\xdf\x8d\xc6\xad\x1b\x4a\x53\x1c\x60\x27\x4f\xd9\x38\x1a\xc5\xd1\xe8\xaa\xa5\xb3\x40\x8d\x1b\x4a\x1b\x0d\x12\xab\x4f\xe7\x96\xa1\xd5\x1c\xb7\x8e\x2b\x2c\x78\xf8\x29\x03\xf0\xc2\x35\x5c\x22\x6b\x72\xba\x48\x9e\x44\xe3\xcd\x0c\x9d\x92\xf3\x37\x92\x55\xab\x3f\xfb\x7a\xb1\xd6\xce\x9e\x7a\xdd\xa9\xf8\x91\x2c\x38\x6f\x53\xc7\x11\x3c\x6f\xfc\xc7\x67\xf1\x30\x82\x87\xc4\xa7\x1e\x62\x25\x38\x5f\x35\x6f\xe4\xdf\x00\x00\x00\xff\xff\xe2\x5b\x68\xde\x2e\x06\x00\x00")

func cfnTransformedTemplateYmlBytes() ([]byte, error) {
	return bindataRead(
		_cfnTransformedTemplateYml,
		"cfn-transformed-template.yml",
	)
}

func cfnTransformedTemplateYml() (*asset, error) {
	bytes, err := cfnTransformedTemplateYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cfn-transformed-template.yml", size: 1582, mode: os.FileMode(420), modTime: time.Unix(1531796565, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7d, 0x3, 0x59, 0xd1, 0x49, 0xd0, 0xef, 0xfd, 0x5, 0xbb, 0xa4, 0x9d, 0x4f, 0xa0, 0x30, 0xe1, 0xe3, 0x1b, 0x24, 0x79, 0x8d, 0x24, 0xb7, 0x90, 0xb2, 0xfa, 0x1d, 0xdf, 0x54, 0xb6, 0x7d, 0xef}}
	return a, nil
}

var _indexJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x53\xc1\x6e\xdb\x3a\x10\xbc\xfb\x2b\x06\xbe\x50\xc2\x4b\xa8\x77\x2c\x14\xf8\x60\xc4\x41\xeb\x43\xe3\xb4\x51\x7b\xe8\xc5\x20\xa4\xb5\xa4\x54\xe2\x32\x24\xe5\xd8\x08\xfc\xef\x05\x25\x59\x76\x5a\x01\xc2\x82\xdc\xe1\xec\xec\x72\xb8\x57\x16\x95\xf7\x06\x0b\x58\x7a\xed\x6a\x4b\x91\x08\x6b\x11\xdf\xcd\xc2\xa7\xdc\x51\xe7\xd8\x75\x3a\xf7\x35\x6b\x54\x4a\x17\x0d\x59\x44\xb4\x27\xed\x6f\x90\xb3\xf6\x74\xf0\x31\xde\x67\x00\x90\x24\xc8\x36\xab\x4d\x8a\x2f\x3d\x0e\x2d\x39\xa7\x4a\x92\x52\xf6\xe9\x9c\xb5\xf3\xb0\x94\xb3\x2d\x1c\x16\xe8\x49\xe4\xf7\x61\x3d\x21\xb8\x21\xd9\x70\x19\xcd\xe9\xe0\xad\x42\xc3\xe5\x3c\xfe\x27\x39\x92\x0c\x89\xd0\x84\x61\xe7\xb7\x6c\x82\xca\x40\x3d\xe8\x01\x2a\x76\x3e\x85\xc8\x1b\x76\x9d\xa5\xdb\x9c\x5b\x53\x37\x64\xa5\x32\xc6\x19\xf6\x32\xe7\x56\xdc\x8c\x58\xc3\x36\x60\x3f\xfd\x7f\xd9\x51\xbe\x4a\x21\x92\xf1\xd8\xb4\xdf\x92\xaf\xb8\x48\x21\x9e\x36\xcf\xd9\xb4\x5b\x91\x2a\xc8\xba\x74\x2a\x1e\x3e\x71\x1f\x46\xa4\xfd\x6d\x76\x34\x24\x52\x08\x65\x4c\x53\xe7\x2a\x08\x4d\x5e\x1c\x6b\x31\x82\x4f\x7d\x3c\xdd\xcd\x3e\xb6\x54\x28\xaf\xb0\xc0\x6b\x47\xf6\xe8\xbc\xad\x75\x29\x87\x50\xef\x8e\xd1\xb9\x90\x18\x04\xf6\xa4\xdb\x86\xf6\xd4\x08\xa4\x10\xcb\xd5\xcf\xe5\xe3\xfd\xc3\x6a\xbb\x79\xca\xd6\x5f\xd7\xbf\x96\xd9\x7a\xf3\xf8\x3c\xe9\x15\xdc\x79\xd3\xf9\xed\x8e\x6d\xab\x7c\xd0\xd6\xeb\xf9\x3b\x5d\xeb\x1d\x87\xe4\x38\x84\x62\x9b\x73\x71\x19\x05\x20\xde\x94\xd5\xb5\x2e\xaf\x0a\x7f\xfb\xb1\x7e\xc8\xae\x21\x2f\x6e\x38\x85\x14\x21\x0e\x1d\xcc\x80\x53\x7c\xd7\x83\x82\xe5\x64\x30\x20\x39\x1f\x8d\xb7\x78\x33\xd9\x2e\xb2\xe4\x4c\x7c\x6e\x36\x2c\x24\xeb\x48\x84\xd1\x88\x2b\x54\x5e\x75\xfa\x77\x7c\x19\x7e\x92\x14\x0c\xc7\xe1\xb2\x6a\x5d\xe2\xad\xf6\x15\x7a\xcc\x79\xe2\x63\xf1\x53\x1c\xe8\xe6\x64\x2d\xdb\xf9\x15\x1f\x4d\x5c\x1f\x6c\xf9\x99\x3d\x7a\x6c\x8a\x39\xfe\x03\xc9\xd1\xe5\x13\xdb\x10\x2d\xf9\xce\x6a\xbc\x87\x7b\x0d\xff\x0c\x68\xb9\xe8\x1a\x92\x74\x08\x4e\x73\xf2\xfc\x98\x16\xe7\x67\xf5\x27\x00\x00\xff\xff\xe9\xb5\xbb\xf5\x8d\x03\x00\x00")

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 909, mode: os.FileMode(420), modTime: time.Unix(1531773662, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6b, 0x15, 0x4a, 0xa5, 0x92, 0x12, 0xc, 0xb3, 0x6f, 0xee, 0x19, 0xe8, 0x54, 0x32, 0xa, 0x89, 0x34, 0x27, 0xb5, 0xeb, 0x22, 0x6a, 0x4, 0xcb, 0x7c, 0x4f, 0x38, 0x92, 0x52, 0x7, 0x4e, 0x8a}}
	return a, nil
}

var _samYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x3d\x73\xe2\x30\x10\xed\xfd\x2b\x96\x8a\xca\x8c\x0c\x33\x37\x87\x3a\xdf\x1d\xdc\x15\x5c\x06\x23\x12\x6a\xc5\x5e\x83\x32\x96\x64\x56\x32\x81\xfc\xfa\x8c\x65\x87\x8f\x90\x22\x5b\x79\xdf\xbe\x7d\xfb\xfc\xec\x74\x23\xd6\xa8\xeb\x4a\x7a\x9c\x5b\xd2\xd2\x3f\x21\x39\x65\x0d\x87\xe1\x98\x25\x2c\x66\xd3\x98\x4d\x87\xd1\x9a\xa4\x71\xa5\x25\xcd\x21\xdd\x08\xce\x05\xd2\x01\xa9\x42\xe7\xe2\x31\x4b\x7e\xc4\x09\x8b\x27\x49\xf4\x07\x5d\x4e\xaa\xf6\x61\x7f\x76\x94\xba\xae\x10\x6c\x09\x35\xd9\x1c\x9d\x53\x66\x0b\x1a\x9d\x93\x5b\x74\x60\x0d\x48\x03\x22\x13\xb0\x6f\xb0\x41\x78\x55\x7e\x07\x0b\xa9\x9f\x0b\x19\x2d\x25\x49\x8d\x1e\xc9\xf1\x08\x20\x6b\xe7\x0f\x52\x63\xdb\x00\xac\x4f\x35\x72\x10\x9e\x94\xd9\x06\xe0\xe6\x6a\xcb\x83\xd2\xd2\x45\x39\x82\x5e\x56\xd8\x86\xf2\x6f\x89\x2c\x6c\x2e\xdb\xa7\xd6\x7b\xb7\x0b\xb9\x2d\x10\x94\x01\x37\x89\x56\xe8\x82\x52\x30\xf7\xff\x24\x32\x11\x1c\xce\x1b\x93\x87\xf5\xab\x03\x9f\xb2\xe2\xfc\x83\x14\x38\x4b\xb2\x35\x92\x57\x9d\x52\x5b\xbf\x6d\x81\x8f\xa4\x38\x0c\x56\x58\xde\xd8\xee\x09\xff\xa4\x29\x2a\x24\x0e\xca\x14\x78\x1c\xed\xba\xb6\x1f\xae\x1a\xe3\x95\x46\x0e\xc6\x16\xf8\xe2\x7e\x8e\x12\xd6\x4f\x66\x07\x34\xfe\x7c\xa5\x77\x1d\xc0\x0b\x76\x0e\x25\x13\x57\xd8\xbd\xc7\xae\xc2\x2b\x73\x18\xfc\x45\x9f\x7a\xdf\x0a\xee\x5d\xc0\x46\x29\x99\x1b\xe6\x2f\xe9\xf3\x9d\x50\x6f\xc8\x21\x61\x51\x17\x59\xcf\xbd\x8f\x2a\x13\x9c\x67\xfd\x57\xfb\xea\xf8\xe5\x5f\xe8\x22\x3a\xf7\xef\x01\x00\x00\xff\xff\x69\x13\x77\x43\xc8\x02\x00\x00")

func samYmlBytes() ([]byte, error) {
	return bindataRead(
		_samYml,
		"sam.yml",
	)
}

func samYml() (*asset, error) {
	bytes, err := samYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sam.yml", size: 712, mode: os.FileMode(420), modTime: time.Unix(1531685283, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4f, 0xf7, 0xa3, 0x63, 0xad, 0xfb, 0x1e, 0x24, 0x6c, 0xd7, 0x9f, 0x2f, 0x8, 0x1, 0x66, 0x4, 0x6b, 0x2d, 0x1d, 0x24, 0x25, 0x7b, 0x4f, 0x63, 0x43, 0xa9, 0xcc, 0x2e, 0xf3, 0x7e, 0x63, 0xa7}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"SQS.md": sqsMd,

	"cfn-transformed-template.yml": cfnTransformedTemplateYml,

	"index.js": indexJs,

	"sam.yml": samYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"SQS.md":                       &bintree{sqsMd, map[string]*bintree{}},
	"cfn-transformed-template.yml": &bintree{cfnTransformedTemplateYml, map[string]*bintree{}},
	"index.js":                     &bintree{indexJs, map[string]*bintree{}},
	"sam.yml":                      &bintree{samYml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
