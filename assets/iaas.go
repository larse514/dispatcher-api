// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ias/cloudformation/SQS.md
// ias/cloudformation/cfn-transformed-template.yml
// ias/cloudformation/index.js
// ias/cloudformation/sam.yml

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sqsMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x4f\x8f\xd3\x30\x10\xc5\xef\xfd\x14\x43\x84\xb4\xa7\x49\xe8\x2e\x7f\x17\xed\x21\xa0\x4a\x54\x6a\x81\x36\xe4\x50\x09\x29\x9a\xd8\x53\x88\x6a\xc7\x8e\xc7\xa6\x0a\x88\xef\x8e\xfa\x87\x1e\x28\xd2\x1e\x9f\x9f\xe7\xfd\x9e\x66\x68\x2f\xa0\x8c\x4b\x7a\xeb\x82\xa5\xd8\xb9\x1e\x3c\xa9\x1d\x7d\x63\x40\x8c\x6c\xbd\xa1\xc8\xb8\xed\x0c\x83\x90\xcd\x47\x6b\x00\xd1\xa5\xe8\x53\xfc\xc7\x56\xdb\x1e\x63\xa0\x5e\x0e\x49\xac\x2f\xee\x79\x46\xee\xb0\x4d\x6a\xc7\x11\x0c\xd9\x56\x53\x7e\x52\xb9\x75\x4e\x1b\x9e\xfc\xa7\x87\x66\x6f\xdc\x78\x55\x23\x2f\x1e\x23\x45\x52\x3b\xec\xc9\xf2\x19\x85\x32\x08\xfa\xe0\x14\x8b\xb8\x00\x88\x8a\x3c\xb5\x9d\xe9\x62\xc7\x02\xef\xcb\xcf\xe5\xbb\xf9\x62\xfe\x65\xd3\xcc\xcb\x25\x20\x7a\x0a\x64\x39\x72\x40\xf7\x83\x43\xe8\x34\x0b\xac\x12\x27\xfe\x48\x96\x1f\x2a\x67\xf9\xa2\x26\x93\xcd\xa7\x7a\xdd\x54\xab\xaa\x59\xd5\xb3\x7a\xd6\xd4\xeb\xc5\xc3\xf7\x18\xbd\xdc\x17\x85\x0c\x92\x27\x41\x26\x89\x38\xcd\xc9\xd2\x4f\xd7\xd3\x5e\x72\xe5\x6c\x31\xbd\xbd\x7b\xfe\xe2\xe5\xab\xd7\x6f\x9e\x4d\x6f\x0b\x3b\xe2\x70\x48\x7c\x0b\x5f\x8f\x7b\x90\x41\x40\xb8\xd7\x68\x59\xe4\x74\x89\xa3\x8f\x29\x18\x78\x7a\x4d\x04\xfc\xfb\x13\x5b\xa7\x47\xb8\xf9\x05\x99\x1d\x97\xa7\xa7\xec\x1e\xb2\x0f\x6c\x8c\x83\xaa\x5c\x3e\xc9\xe0\xf7\xcd\x9f\x00\x00\x00\xff\xff\x23\x5c\x3d\x8e\xf3\x01\x00\x00")

func sqsMdBytes() ([]byte, error) {
	return bindataRead(
		_sqsMd,
		"SQS.md",
	)
}

func sqsMd() (*asset, error) {
	bytes, err := sqsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "SQS.md", size: 499, mode: os.FileMode(420), modTime: time.Unix(1531616402, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x36, 0x5c, 0x21, 0x2b, 0xf4, 0xaa, 0x5b, 0x85, 0x0, 0xfd, 0xe, 0xc5, 0x45, 0xab, 0xdd, 0xe1, 0x91, 0xbf, 0x14, 0x40, 0x98, 0xd, 0x3a, 0xf5, 0x74, 0x4b, 0x3d, 0x4a, 0xe4, 0xf8, 0x88, 0x90}}
	return a, nil
}

var _cfnTransformedTemplateYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\x4d\x6f\xdb\x30\x0c\xbd\xe7\x57\x70\xd8\xa1\x27\x17\x72\x3e\x56\x5b\xb7\x74\x6b\x36\x60\xdd\x50\x47\xc1\x0a\xec\xa6\x4a\x4c\xa2\xcd\x92\x5c\x4a\xee\x9a\xfd\xfa\xc1\xb2\x9b\x8f\xa6\xe3\x89\x7a\x7c\xe6\x7b\x24\x3d\xbf\x17\x2b\xb4\x4d\x2d\x23\x2e\x3c\x59\x19\x7f\x20\x05\xe3\x1d\x87\x8b\x31\xcb\x59\xc6\xca\x8c\x95\x17\xa3\x4f\x18\x14\x99\x26\xa6\xca\xcd\xb3\xb4\x4d\x8d\xe0\xd7\xd0\x90\x57\x18\x82\x71\x1b\xb0\x18\x82\xdc\x60\x00\xef\x40\x3a\x10\x95\x80\xc7\x16\x5b\x84\x3f\x26\x6e\xe1\x56\xda\x07\x2d\x47\x77\x92\xa4\xc5\x88\x14\xf8\x08\x06\x50\xf8\x96\x14\x76\x6f\x80\x13\x9d\x5b\xaf\x64\x97\x75\x42\x3d\x15\x94\xd7\x08\xc6\x41\x98\x24\xfa\x6a\xd7\x20\x07\x11\xc9\xb8\xcd\x08\xa0\xea\xf4\xbe\x4b\xfb\x56\xb3\x0e\x86\xb5\xa7\x83\xb1\xf3\x0e\x4b\x0c\xc9\x4b\x32\xf7\x6d\x27\x2a\x91\x3a\x2e\x5a\xa7\x52\x93\xf4\xc5\x1d\xf9\x06\x29\x9a\x9e\xd5\xc5\x47\xaf\xf1\x25\x07\x10\x93\xeb\x56\xfd\xc6\xc8\xe1\xdd\x12\xd7\xfc\x64\xc8\x23\xd2\x57\xdc\x71\xc8\x67\xb2\x98\x8e\x4b\xc6\x8a\x22\x47\xfd\x50\x62\x79\xa5\xcb\xe9\x4c\x4d\x27\xe5\x54\x17\x57\xb3\x3d\xff\x3d\xfc\x34\xcd\xc2\xd4\xc7\xd3\xf6\x31\x24\x37\x4f\xe8\x62\x38\xb8\x48\xee\x13\x78\xc0\xde\xf2\xde\xc7\xb5\x8c\x6a\x2b\xcc\x5f\xe4\x90\xb3\x93\x4a\x5a\xc0\x29\x19\x60\xe1\x38\xff\x8c\x71\x1e\xe3\xeb\x4a\xd6\x09\x3f\x86\x6a\xbf\xdf\xe3\xd2\x9c\xdc\x11\x36\x6c\xbe\x12\x03\xf6\x45\x3a\x5d\x23\x71\x30\x4e\xe3\xf3\xe5\xb6\x7f\x0e\xc5\x65\xeb\xa2\xb1\xc8\xc1\x79\x8d\xbf\x42\x71\x39\xd8\xec\x9b\xcc\xef\x05\xe7\x02\xe9\x09\xa9\xc6\x10\x38\x7f\xb9\x58\x7f\xc6\xc1\xcf\xff\xce\xf7\xea\xaf\x49\x72\xdd\xe1\xf6\xf8\x99\x52\x25\x38\xef\x47\x5c\x91\x74\x61\xed\xc9\x9e\x99\xc8\xc6\x2c\xff\x90\xe5\x2c\x9b\xe4\xa3\x7f\x01\x00\x00\xff\xff\xb1\x04\xfa\xb2\x65\x03\x00\x00")

func cfnTransformedTemplateYmlBytes() ([]byte, error) {
	return bindataRead(
		_cfnTransformedTemplateYml,
		"cfn-transformed-template.yml",
	)
}

func cfnTransformedTemplateYml() (*asset, error) {
	bytes, err := cfnTransformedTemplateYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cfn-transformed-template.yml", size: 869, mode: os.FileMode(420), modTime: time.Unix(1531629657, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcc, 0x78, 0xb, 0x69, 0x7, 0x57, 0xb6, 0x62, 0xe0, 0xa7, 0x7a, 0x61, 0x8, 0x59, 0xae, 0xf9, 0xab, 0xd0, 0x6a, 0x9a, 0x1e, 0xfd, 0x54, 0xff, 0x4d, 0x57, 0xfe, 0x5b, 0x92, 0x2e, 0x5a, 0x8f}}
	return a, nil
}

var _indexJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xb1\x0a\xc2\x40\x0c\x86\xf7\x3e\xc5\x4f\xa7\x16\xe4\xba\x0b\xdd\x1c\xdc\x0a\xe2\x0b\x1c\xd7\x58\x85\x6b\x22\xb9\x54\x2a\xc5\x77\x17\xaf\xd6\xc5\x21\x81\xf0\xfd\x7c\xe4\xf7\xe9\xc9\x01\x97\x89\x83\xdd\x84\x71\xf5\xdc\x47\x52\x54\xf4\x20\xb6\x1d\x82\xb0\xd1\x6c\x35\x96\x02\x00\x9a\x06\xe7\xee\xd0\xed\x71\xcc\x39\x8c\x94\x92\x1f\xc8\x39\x97\x71\x10\x4e\x06\xa5\x20\xda\x27\xb4\xc8\x12\x77\x5a\xef\x5f\x42\x22\xb9\x28\x43\x55\xd2\x6c\xea\x11\x65\x28\xeb\x3f\xf8\x95\xac\x20\x2f\x25\x9b\x94\xb1\xbc\x0a\xe0\x33\x05\x30\x4a\x3f\x45\x72\x34\xdf\x45\x2d\xb9\xed\xf9\x76\xab\xf1\x0e\x00\x00\xff\xff\x39\x06\x8c\xea\xdd\x00\x00\x00")

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 221, mode: os.FileMode(420), modTime: time.Unix(1531623021, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xde, 0x2, 0x84, 0x6c, 0x55, 0x3a, 0xe9, 0xee, 0x72, 0xd8, 0x23, 0xa3, 0xf6, 0x7a, 0x61, 0xa9, 0x46, 0xf, 0x31, 0x6, 0x47, 0xd2, 0x12, 0x6e, 0x5d, 0xd4, 0xce, 0xb9, 0x48, 0x41, 0xca, 0xa8}}
	return a, nil
}

var _samYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x3d\x73\xe2\x30\x10\xed\xfd\x2b\x96\x8a\xca\x8c\x0c\x33\x37\x87\x3a\xdf\x1d\xdc\x15\x5c\x06\x23\x12\x6a\xc5\x5e\x83\x32\x96\x64\x56\x32\x81\xfc\xfa\x8c\x65\x87\x8f\x90\x22\x5b\x79\xdf\xbe\x7d\xfb\xfc\xec\x74\x23\xd6\xa8\xeb\x4a\x7a\x9c\x5b\xd2\xd2\x3f\x21\x39\x65\x0d\x87\xe1\x98\x25\x2c\x66\xd3\x98\x4d\x87\xd1\x9a\xa4\x71\xa5\x25\xcd\x21\xdd\x08\xce\x05\xd2\x01\xa9\x42\xe7\xe2\x31\x4b\x7e\xc4\x09\x8b\x27\x49\xf4\x07\x5d\x4e\xaa\xf6\x61\x7f\x76\x94\xba\xae\x10\x6c\x09\x35\xd9\x1c\x9d\x53\x66\x0b\x1a\x9d\x93\x5b\x74\x60\x0d\x48\x03\x22\x13\xb0\x6f\xb0\x41\x78\x55\x7e\x07\x0b\xa9\x9f\x0b\x19\x2d\x25\x49\x8d\x1e\xc9\xf1\x08\x20\x6b\xe7\x0f\x52\x63\xdb\x00\xac\x4f\x35\x72\x10\x9e\x94\xd9\x06\xe0\xe6\x6a\xcb\x83\xd2\xd2\x45\x39\x82\x5e\x56\xd8\x86\xf2\x6f\x89\x2c\x6c\x2e\xdb\xa7\xd6\x7b\xb7\x0b\xb9\x2d\x10\x94\x01\x37\x89\x56\xe8\x82\x52\x30\xf7\xff\x24\x32\x11\x1c\xce\x1b\x93\x87\xf5\xab\x03\x9f\xb2\xe2\xfc\x83\x14\x38\x4b\xb2\x35\x92\x57\x9d\x52\x5b\xbf\x6d\x81\x8f\xa4\x38\x0c\x56\x58\xde\xd8\xee\x09\xff\xa4\x29\x2a\x24\x0e\xca\x14\x78\x1c\xed\xba\xb6\x1f\xae\x1a\xe3\x95\x46\x0e\xc6\x16\xf8\xe2\x7e\x8e\x12\xd6\x4f\x66\x07\x34\xfe\x7c\xa5\x77\x1d\xc0\x0b\x76\x0e\x25\x13\x57\xd8\xbd\xc7\xae\xc2\x2b\x73\x18\xfc\x45\x9f\x7a\xdf\x0a\xee\x5d\xc0\x46\x29\x99\x1b\xe6\x2f\xe9\xf3\x9d\x50\x6f\xc8\x21\x61\x51\x17\x59\xcf\xbd\x8f\x2a\x13\x9c\x67\xfd\x57\xfb\xea\xf8\xe5\x5f\xe8\x22\x3a\xf7\xef\x01\x00\x00\xff\xff\x69\x13\x77\x43\xc8\x02\x00\x00")

func samYmlBytes() ([]byte, error) {
	return bindataRead(
		_samYml,
		"sam.yml",
	)
}

func samYml() (*asset, error) {
	bytes, err := samYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sam.yml", size: 712, mode: os.FileMode(420), modTime: time.Unix(1531627807, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4f, 0xf7, 0xa3, 0x63, 0xad, 0xfb, 0x1e, 0x24, 0x6c, 0xd7, 0x9f, 0x2f, 0x8, 0x1, 0x66, 0x4, 0x6b, 0x2d, 0x1d, 0x24, 0x25, 0x7b, 0x4f, 0x63, 0x43, 0xa9, 0xcc, 0x2e, 0xf3, 0x7e, 0x63, 0xa7}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"SQS.md": sqsMd,

	"cfn-transformed-template.yml": cfnTransformedTemplateYml,

	"index.js": indexJs,

	"sam.yml": samYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"SQS.md":                       &bintree{sqsMd, map[string]*bintree{}},
	"cfn-transformed-template.yml": &bintree{cfnTransformedTemplateYml, map[string]*bintree{}},
	"index.js":                     &bintree{indexJs, map[string]*bintree{}},
	"sam.yml":                      &bintree{samYml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
