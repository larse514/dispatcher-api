// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ias/cloudformation/SQS.md
// ias/cloudformation/cfn-transformed-template.yml
// ias/cloudformation/index.js
// ias/cloudformation/sam.yml
// ias/cloudformation/transformed.yml

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sqsMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x4f\x8f\xd3\x30\x10\xc5\xef\xfd\x14\x43\x84\xb4\xa7\x49\xe8\x2e\x7f\x17\xed\x21\xa0\x4a\x54\x6a\x81\x36\xe4\x50\x09\x29\x9a\xd8\x53\x88\x6a\xc7\x8e\xc7\xa6\x0a\x88\xef\x8e\xfa\x87\x1e\x28\xd2\x1e\x9f\x9f\xe7\xfd\x9e\x66\x68\x2f\xa0\x8c\x4b\x7a\xeb\x82\xa5\xd8\xb9\x1e\x3c\xa9\x1d\x7d\x63\x40\x8c\x6c\xbd\xa1\xc8\xb8\xed\x0c\x83\x90\xcd\x47\x6b\x00\xd1\xa5\xe8\x53\xfc\xc7\x56\xdb\x1e\x63\xa0\x5e\x0e\x49\xac\x2f\xee\x79\x46\xee\xb0\x4d\x6a\xc7\x11\x0c\xd9\x56\x53\x7e\x52\xb9\x75\x4e\x1b\x9e\xfc\xa7\x87\x66\x6f\xdc\x78\x55\x23\x2f\x1e\x23\x45\x52\x3b\xec\xc9\xf2\x19\x85\x32\x08\xfa\xe0\x14\x8b\xb8\x00\x88\x8a\x3c\xb5\x9d\xe9\x62\xc7\x02\xef\xcb\xcf\xe5\xbb\xf9\x62\xfe\x65\xd3\xcc\xcb\x25\x20\x7a\x0a\x64\x39\x72\x40\xf7\x83\x43\xe8\x34\x0b\xac\x12\x27\xfe\x48\x96\x1f\x2a\x67\xf9\xa2\x26\x93\xcd\xa7\x7a\xdd\x54\xab\xaa\x59\xd5\xb3\x7a\xd6\xd4\xeb\xc5\xc3\xf7\x18\xbd\xdc\x17\x85\x0c\x92\x27\x41\x26\x89\x38\xcd\xc9\xd2\x4f\xd7\xd3\x5e\x72\xe5\x6c\x31\xbd\xbd\x7b\xfe\xe2\xe5\xab\xd7\x6f\x9e\x4d\x6f\x0b\x3b\xe2\x70\x48\x7c\x0b\x5f\x8f\x7b\x90\x41\x40\xb8\xd7\x68\x59\xe4\x74\x89\xa3\x8f\x29\x18\x78\x7a\x4d\x04\xfc\xfb\x13\x5b\xa7\x47\xb8\xf9\x05\x99\x1d\x97\xa7\xa7\xec\x1e\xb2\x0f\x6c\x8c\x83\xaa\x5c\x3e\xc9\xe0\xf7\xcd\x9f\x00\x00\x00\xff\xff\x23\x5c\x3d\x8e\xf3\x01\x00\x00")

func sqsMdBytes() ([]byte, error) {
	return bindataRead(
		_sqsMd,
		"SQS.md",
	)
}

func sqsMd() (*asset, error) {
	bytes, err := sqsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "SQS.md", size: 499, mode: os.FileMode(420), modTime: time.Unix(1531616402, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x36, 0x5c, 0x21, 0x2b, 0xf4, 0xaa, 0x5b, 0x85, 0x0, 0xfd, 0xe, 0xc5, 0x45, 0xab, 0xdd, 0xe1, 0x91, 0xbf, 0x14, 0x40, 0x98, 0xd, 0x3a, 0xf5, 0x74, 0x4b, 0x3d, 0x4a, 0xe4, 0xf8, 0x88, 0x90}}
	return a, nil
}

var _cfnTransformedTemplateYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xc1\x72\xda\x30\x10\xbd\xf3\x15\x3b\xba\x9b\x18\x68\x4a\xd0\xa5\x63\x1a\xd2\x76\x1a\x3a\x10\x65\x92\xf3\x22\x2f\x44\xad\x2d\x39\x92\x1c\x42\xbe\xbe\x63\x19\x83\x49\xcc\x25\x3e\x59\xbb\x4f\xbb\x4f\xef\xad\x14\x45\x11\xf4\x92\x47\x71\x4f\x79\x91\xa1\xa7\x1b\x63\x73\xf4\x0f\x64\x9d\x32\x9a\x03\x1b\xc6\x83\x38\x8a\x27\x51\x3c\x61\xbd\x6b\x72\xd2\xaa\xc2\xd7\x99\xd9\x2b\xe6\x45\x46\x60\xd6\x50\x58\x23\xc9\x39\xa5\x37\x90\x93\x73\xb8\x21\x07\x46\x03\x6a\x10\x4b\x01\xcf\x25\x95\x04\x5b\xe5\x9f\xe0\x16\xf3\x55\x8a\xac\xb7\x40\x8b\x39\x79\xb2\x8e\x43\x0f\xf6\x61\x61\x4a\x2b\x29\x04\x00\x4e\x7b\xdd\x1a\x89\xd5\x6f\xd5\xac\x06\x83\x34\x29\x81\xd2\xe0\x46\x2c\x6c\xb8\xdf\x15\xc4\x41\x78\xab\xf4\xa6\x07\xb0\xac\x9a\xfe\xc1\xbc\xbb\x5e\x95\x80\xb5\xb1\x47\x7e\x1d\x45\xee\xc8\x05\x46\x35\xc7\xf9\x4e\x2c\x45\xa8\x7a\x53\x6a\x59\xd7\x09\x7b\x16\xd6\x14\x64\xbd\xda\xe3\xaa\xef\xbb\x49\xe9\xb0\x00\x10\xa3\x69\x29\xff\x91\xe7\x90\x05\xee\xfd\x55\x58\xf6\x73\x63\xd2\x8c\x5a\xb0\xdf\xb4\xe3\x30\x9a\x4c\xa4\xbc\xfc\x32\xfe\x3a\xb9\xc2\x18\x31\x1e\xaf\x62\x1a\x4e\x86\xa3\xcb\xcb\x58\xae\x68\x34\xde\xe3\x7f\xa2\x4e\x33\xb2\x1c\x94\x4e\xe9\xb5\xff\x54\x2f\xf7\xc9\x3b\x93\xb5\x09\x7c\x03\x76\xa3\x39\xff\x41\x3e\xf1\x9e\x1d\xc2\x2d\x04\x40\xd4\x71\xc2\xaa\xcc\x09\x24\xb1\xba\xe9\x50\x6a\xaf\x2a\x75\xb5\x49\xe9\xaf\xbb\xea\x0f\xe2\x7d\xe6\x1e\x37\xae\x55\x39\x6a\x37\x09\x07\x64\xb5\x0a\x5c\x5a\x42\x4f\xe9\x74\xc7\x5a\x88\x07\xcc\xca\xca\x82\x64\xde\x32\x84\x25\x8f\x82\xf3\xda\x78\xce\x1b\x76\xac\xd3\x95\x10\x99\xbd\x90\xf6\xe7\xfd\x99\xa2\x97\x4f\x42\xbd\x11\x87\x03\xed\xb0\xa5\x1e\xc1\xc4\xea\xcf\x88\xf7\xec\x02\x91\x33\x82\x35\xfc\x5a\x33\x19\x74\xa4\x35\xef\x38\xc5\xd9\xc3\xb7\x68\xce\xb1\x28\x94\xde\x74\xcb\xd0\x9a\x80\x0e\x01\x12\xe7\xca\x9c\x2a\xcc\xc2\x64\x4a\xee\xae\x8d\x2c\xf3\xa3\x64\x61\x1a\x3d\x7a\x7a\x17\x7b\xe7\x26\x40\xd2\xbe\x08\x6d\x14\x73\xde\xf1\x63\x17\x76\x02\x98\xad\xd7\x24\x3d\x87\x24\xcb\xcc\xf6\x24\xb3\xb0\x4a\x4b\x55\x60\xf6\xa1\xa4\x20\xfb\xa2\x24\x7d\x88\x57\xcd\xf6\xb7\x0a\x73\x7c\x33\x1a\xb7\xae\x2f\x4d\x7e\x80\x9d\x3c\x65\xc3\x68\x10\x47\x83\x71\x43\x67\x8e\x1a\x37\x94\xd6\x1a\x24\x56\x9f\xce\x2d\x43\xab\x39\x6e\x1d\x57\x98\xf3\xf0\x53\x04\xe0\x85\xab\xb9\x44\xd6\x64\x74\x91\x3c\x8a\xda\x9b\x29\x3a\x25\x67\xaf\x24\xcb\x46\x7f\xf6\xf9\x62\x8d\x9d\x1d\xf5\xda\x53\xf1\x2b\x99\x73\xde\xa4\x8e\x23\x78\xde\xf8\xf7\xcf\xe2\x61\x04\x0f\x89\x0f\x3d\xc4\x52\x70\xbe\xac\xdf\xc8\xff\x01\x00\x00\xff\xff\x9c\x7a\xd2\xae\x2e\x06\x00\x00")

func cfnTransformedTemplateYmlBytes() ([]byte, error) {
	return bindataRead(
		_cfnTransformedTemplateYml,
		"cfn-transformed-template.yml",
	)
}

func cfnTransformedTemplateYml() (*asset, error) {
	bytes, err := cfnTransformedTemplateYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cfn-transformed-template.yml", size: 1582, mode: os.FileMode(420), modTime: time.Unix(1531682578, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6f, 0xe5, 0x53, 0x42, 0xb4, 0xcb, 0xad, 0xc5, 0x57, 0x52, 0x4c, 0x60, 0x7c, 0x1b, 0x2a, 0xa5, 0xaa, 0x40, 0xff, 0xc3, 0x3a, 0xba, 0x23, 0x88, 0x8, 0xa, 0x7e, 0xa5, 0x5f, 0xfc, 0x41, 0x5d}}
	return a, nil
}

var _indexJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xb1\x0a\xc2\x40\x0c\x86\xf7\x3e\xc5\x4f\xa7\x16\xe4\xba\x0b\xdd\x1c\xdc\x0a\xe2\x0b\x1c\xd7\x58\x85\x6b\x22\xb9\x54\x2a\xc5\x77\x17\xaf\xd6\xc5\x21\x81\xf0\xfd\x7c\xe4\xf7\xe9\xc9\x01\x97\x89\x83\xdd\x84\x71\xf5\xdc\x47\x52\x54\xf4\x20\xb6\x1d\x82\xb0\xd1\x6c\x35\x96\x02\x00\x9a\x06\xe7\xee\xd0\xed\x71\xcc\x39\x8c\x94\x92\x1f\xc8\x39\x97\x71\x10\x4e\x06\xa5\x20\xda\x27\xb4\xc8\x12\x77\x5a\xef\x5f\x42\x22\xb9\x28\x43\x55\xd2\x6c\xea\x11\x65\x28\xeb\x3f\xf8\x95\xac\x20\x2f\x25\x9b\x94\xb1\xbc\x0a\xe0\x33\x05\x30\x4a\x3f\x45\x72\x34\xdf\x45\x2d\xb9\xed\xf9\x76\xab\xf1\x0e\x00\x00\xff\xff\x39\x06\x8c\xea\xdd\x00\x00\x00")

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 221, mode: os.FileMode(420), modTime: time.Unix(1531623021, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xde, 0x2, 0x84, 0x6c, 0x55, 0x3a, 0xe9, 0xee, 0x72, 0xd8, 0x23, 0xa3, 0xf6, 0x7a, 0x61, 0xa9, 0x46, 0xf, 0x31, 0x6, 0x47, 0xd2, 0x12, 0x6e, 0x5d, 0xd4, 0xce, 0xb9, 0x48, 0x41, 0xca, 0xa8}}
	return a, nil
}

var _samYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xc1\x92\x93\x40\x10\xbd\xf3\x15\xbd\xa7\x3d\x81\xc3\x6e\x95\xe5\xce\x0d\x75\x57\x0f\xab\x15\x32\xd1\x9c\x47\x68\x92\x49\x31\x33\xa4\x7b\x88\x89\x5f\x6f\x31\x60\x48\x8c\x07\xfb\x44\xbf\x7e\xfd\xfa\xf1\xa0\x58\xab\x15\xda\xae\xd5\x01\x5f\x3c\x59\x1d\xbe\x23\xb1\xf1\x4e\xc2\xfd\x83\xc8\x45\x2a\x9e\x52\xf1\x74\x9f\xac\x48\x3b\x6e\x3c\x59\x09\xc5\x5a\x49\xa9\x90\x0e\x48\x2d\x32\xa7\x0f\x22\x7f\x9b\xe6\x22\x7d\xcc\x93\x8f\xc8\x15\x99\x2e\xc4\xfd\xe7\xa3\xb6\x5d\x8b\xe0\x1b\xe8\xc8\x57\xc8\x6c\xdc\x06\x2c\x32\xeb\x0d\x32\x78\x07\xda\x81\x2a\x15\xec\x7b\xec\x11\x7e\x9a\xb0\x85\x57\x6d\x7f\xd4\x3a\x59\x68\xd2\x16\x03\x12\xcb\x04\xa0\x1c\xe6\x5f\xb5\xc5\xa1\x01\x58\x9d\x3a\x94\xa0\x02\x19\xb7\x89\xc0\xd5\xd5\x81\x07\x8d\xa7\x59\x39\x81\x49\x56\xf9\x9e\xaa\xff\x12\x79\xf5\x95\x1e\x9e\x06\xef\xe3\x2e\x54\xbe\x46\x30\x0e\xf8\x31\x59\x22\x47\xa5\x68\xee\xcb\x49\x95\x2a\x3a\x7c\xe9\x5d\x15\xd7\x2f\x0e\xfc\x95\x95\x94\x7f\x48\x91\xb3\x20\xdf\x21\x05\x33\x2a\x0d\xf5\xc1\xd7\xf8\x8d\x8c\x84\xec\x8d\x71\x35\x1e\xb3\x1d\x4f\x93\xcf\xda\xd5\x2d\x92\x84\x11\xdf\x8e\xed\x34\x5c\xf6\x2e\x18\x8b\x12\x9c\xaf\x71\xc7\xef\xb2\x5c\x4c\x93\xe7\x03\xba\x70\x96\x9f\xec\x46\x70\xc6\xce\x69\x94\xea\x02\xbb\x35\x37\x56\x7c\x57\x09\x77\x9f\x30\x14\x21\x0c\x82\x7b\x8e\x58\x56\x90\xbb\x62\xbe\xd7\xa1\xda\x2a\xf3\x0b\x25\xe4\x22\x19\xb3\x9a\xb8\xb7\x19\x95\x4a\xca\x72\xfa\x5c\xff\x3a\x3e\xff\x04\x70\xb7\xc4\x66\xee\x7f\x07\x00\x00\xff\xff\xaa\x30\x09\x63\xc1\x02\x00\x00")

func samYmlBytes() ([]byte, error) {
	return bindataRead(
		_samYml,
		"sam.yml",
	)
}

func samYml() (*asset, error) {
	bytes, err := samYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sam.yml", size: 705, mode: os.FileMode(420), modTime: time.Unix(1531682143, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf2, 0x13, 0xde, 0x9b, 0x4f, 0x10, 0xa8, 0x85, 0x3e, 0x63, 0xc4, 0x87, 0xfa, 0xd, 0xe4, 0xaf, 0x2f, 0x8c, 0x5d, 0xc1, 0x70, 0x74, 0xb1, 0x6d, 0x82, 0x8b, 0x1f, 0x6b, 0xab, 0xc5, 0x8a, 0x98}}
	return a, nil
}

var _transformedYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x4f\x73\xda\x3e\x10\xbd\xf3\x29\xf6\x96\x93\x89\x81\x5f\x7e\x04\xdd\x4c\x43\xda\x4e\x43\x07\xa2\x4c\x72\x5e\xe4\x85\xa8\xb5\x24\x47\x92\x43\xc8\xa7\xef\x58\x36\xd8\xe6\xcf\x4c\xcb\x49\xda\x7d\x7a\xfb\x76\xf7\xe1\xe4\x85\x3f\x91\xca\x33\xf4\x74\x6f\xac\x42\xff\x4c\xd6\x49\xa3\x19\x5c\x0d\xe3\x41\x1c\xc5\x93\x28\x9e\x5c\xf5\xee\xc8\x09\x2b\x73\x1f\x32\xb3\x0f\x54\x79\x46\x60\xd6\x90\x5b\x23\xc8\x39\xa9\x37\xa0\xc8\x39\xdc\x90\x03\xa3\x01\x35\xf0\x25\x87\xb7\x82\x0a\x82\xad\xf4\xaf\xf0\x80\x6a\x95\x62\x6f\x81\x16\x15\x79\xb2\x8e\xf5\xa0\x0e\x72\x53\x58\x41\xe5\x1d\xa0\x53\xe7\xc1\x08\x2c\x4f\x65\xa1\x0a\x0a\xc2\xa4\x04\x52\x83\x1b\x05\xf8\xd3\x2e\x27\x06\xdc\x5b\xa9\x37\x3d\x80\x65\x59\xef\x27\xaa\x73\x64\x65\x18\xd6\xc6\x36\xc2\x4e\x19\x1e\xc9\x05\x2d\x41\xdc\x7c\xc7\x97\x3c\x30\xde\x17\x5a\x04\x92\xf0\x62\x61\x4d\x4e\xd6\xcb\x0a\x55\xfe\xbe\x98\x94\xf6\x67\x00\x3e\x9a\x16\xe2\x37\x79\x06\x59\xd0\xdc\x5f\x85\x6b\x5f\x19\x93\x66\xd4\x82\xfd\xa0\x1d\x83\xd1\x64\x22\xc4\xcd\x7f\xe3\xff\x27\xb7\x18\x23\xc6\xe3\x55\x4c\xc3\xc9\x70\x74\x73\x13\x8b\x15\x8d\xc6\x35\xfe\x1b\xea\x34\x23\xcb\x40\xea\x94\x3e\xfa\xaf\xd5\xb5\x4e\x3e\x9a\xac\x55\xff\x5e\x33\xf6\x95\x7c\xe2\x7d\x13\x03\x88\xce\xf4\x53\xbe\xeb\x40\x12\xab\xf7\x94\x85\xf6\x52\x11\x03\x6d\x52\xfa\xe5\x6e\xfb\x83\xb8\xce\x3c\xe1\xc6\x35\xc4\x11\x84\x2e\xaa\x4e\x99\xb0\x84\x9e\xd2\xe9\xae\xc5\xfa\x8c\x59\x51\x4e\x38\x99\xb7\xe6\x9d\xbc\x70\xc6\xaa\x95\x32\xb6\x97\x73\x76\xe6\x21\x32\x7b\x27\xed\x2f\x4d\x7f\x8a\x5e\xbc\x72\xf9\x49\x0c\x0e\x22\xc3\x83\xca\x57\x89\xd5\x7f\x35\x9b\x37\xb7\x3c\x98\xe2\x74\x1e\x7b\x39\x8d\xb9\xc2\x94\x68\xcd\xce\x68\xbe\xd4\x68\x4b\xd5\x1c\xf3\xbc\xf2\xec\xf9\xb5\x5c\x6a\x36\x71\xae\x50\x54\x22\x16\x26\x93\x62\x77\x67\x44\xa1\x0e\xc3\x09\xbe\xf2\xe8\xa9\x1b\x0a\xad\xb4\x1c\xdc\x8e\x3b\xef\x58\x43\xda\x49\xcf\xd6\x6b\x12\x9e\x41\x92\x65\x66\xdb\xc9\x2c\xac\xd4\x42\xe6\x98\x1d\xf3\x71\xb2\xef\x52\xd0\x71\xb8\x2c\x54\xff\x19\x50\xe1\xa7\xd1\xb8\x75\x7d\x61\xd4\x01\xd6\xf9\xe8\x0c\xa3\x41\x1c\x0d\xc6\x57\x75\x76\x8e\x1a\x37\x94\x56\xfd\x26\x56\x77\xdc\x87\x56\x33\xdc\x3a\x26\x51\xb1\x70\xc8\x03\xec\xda\x55\x42\x22\x6b\x32\xba\x4e\x5e\x78\xb5\x82\x29\x3a\x29\x66\x1f\x24\x8a\x13\xfb\xff\x2b\xd5\x7e\x69\xa7\x6c\xad\xc5\x7f\x4f\xe6\x8c\xd5\x89\xc6\x62\x97\x76\x7b\xf4\xf5\x3a\x18\xec\x10\x3f\xa6\xe7\x4b\xce\x58\xc8\xfe\x09\x00\x00\xff\xff\xcf\xf5\x00\x78\xc6\x05\x00\x00")

func transformedYmlBytes() ([]byte, error) {
	return bindataRead(
		_transformedYml,
		"transformed.yml",
	)
}

func transformedYml() (*asset, error) {
	bytes, err := transformedYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "transformed.yml", size: 1478, mode: os.FileMode(420), modTime: time.Unix(1531682180, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x37, 0x9a, 0x34, 0xcf, 0xe7, 0xab, 0x9f, 0xdd, 0xbd, 0x2c, 0x40, 0xa8, 0xd, 0x2a, 0x26, 0x63, 0xef, 0xde, 0xdb, 0xc6, 0x67, 0x6a, 0x9, 0xec, 0xe8, 0xfe, 0xd1, 0x38, 0x55, 0xa9, 0xc9, 0xd1}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"SQS.md": sqsMd,

	"cfn-transformed-template.yml": cfnTransformedTemplateYml,

	"index.js": indexJs,

	"sam.yml": samYml,

	"transformed.yml": transformedYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"SQS.md":                       &bintree{sqsMd, map[string]*bintree{}},
	"cfn-transformed-template.yml": &bintree{cfnTransformedTemplateYml, map[string]*bintree{}},
	"index.js":                     &bintree{indexJs, map[string]*bintree{}},
	"sam.yml":                      &bintree{samYml, map[string]*bintree{}},
	"transformed.yml":              &bintree{transformedYml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
